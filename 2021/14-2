#!/usr/bin/python3

import re
import doctest
from collections import Counter


actual_data = """\
KKOSPHCNOCHHHSPOBKVF

NV -> S
OK -> K
SO -> N
FN -> F
NB -> K
BV -> K
PN -> V
KC -> C
HF -> N
CK -> S
VP -> H
SK -> C
NO -> F
PB -> O
PF -> P
VC -> C
OB -> S
VF -> F
BP -> P
HO -> O
FF -> S
NF -> B
KK -> C
OC -> P
OV -> B
NK -> B
KO -> C
OH -> F
CV -> F
CH -> K
SC -> O
BN -> B
HS -> O
VK -> V
PV -> S
BO -> F
OO -> S
KB -> N
NS -> S
BF -> N
SH -> F
SB -> S
PP -> F
KN -> H
BB -> C
SS -> V
HP -> O
PK -> P
HK -> O
FH -> O
BC -> N
FK -> K
HN -> P
CC -> V
FO -> F
FP -> C
VO -> N
SF -> B
HC -> O
NN -> K
FC -> C
CS -> O
FV -> P
HV -> V
PO -> H
BH -> F
OF -> P
PC -> V
CN -> O
HB -> N
CF -> P
HH -> K
VH -> H
OP -> F
BK -> S
SP -> V
BS -> V
VB -> C
NH -> H
SN -> K
KH -> F
OS -> N
NP -> P
VN -> V
KV -> F
KP -> B
VS -> F
NC -> F
ON -> S
FB -> C
SV -> O
PS -> K
KF -> H
CP -> H
FS -> V
VV -> H
CB -> P
PH -> N
CO -> N
KS -> K"""

example_data = """\
NNCB

CH -> B
HH -> N
CB -> H
NH -> C
HB -> C
HC -> B
HN -> C
NN -> C
BH -> H
NC -> B
NB -> B
BN -> B
BB -> N
BC -> B
CC -> N
CN -> C"""


def parse(doc):
    """
    >>> parse(example_data)[0]
    'NNCB'
    >>> list(sorted(parse(example_data)[1].items()))
    [('BB', 'N'), ('BC', 'B'), ('BH', 'H'), ('BN', 'B'), ('CB', 'H'), ('CC', 'N'), ('CH', 'B'), ('CN', 'C'), ('HB', 'C'), ('HC', 'B'), ('HH', 'N'), ('HN', 'C'), ('NB', 'B'), ('NC', 'B'), ('NH', 'C'), ('NN', 'C')]
    """
    template = None
    mapping = dict()
    for line in doc.split("\n"):
        if template is None:
            template = line
        m = re.match("(\w+) -> (\w+)", line)
        if m:
            mapping[m.group(1)] = m.group(2)
    return template, mapping
        

def insert(template, mapping, limit):
    """
    >>> insert('NNCB', {'CH': 'B', 'HH': 'N', 'CB': 'H', 'NH': 'C', 'HB': 'C', 'HC': 'B', 'HN': 'C', 'NN': 'C', 'BH': 'H', 'NC': 'B', 'NB': 'B', 'BN': 'B', 'BB': 'N', 'BC': 'B', 'CC': 'N', 'CN': 'C'}, 1).most_common()
    [('NC', 1), ('CN', 1), ('NB', 1), ('BC', 1), ('CH', 1), ('HB', 1)]
    >>> insert('NNCB', {'CH': 'B', 'HH': 'N', 'CB': 'H', 'NH': 'C', 'HB': 'C', 'HC': 'B', 'HN': 'C', 'NN': 'C', 'BH': 'H', 'NC': 'B', 'NB': 'B', 'BN': 'B', 'BB': 'N', 'BC': 'B', 'CC': 'N', 'CN': 'C'}, 4).most_common()
    [('NB', 9), ('BB', 9), ('BN', 6), ('CB', 5), ('BC', 4), ('CN', 3), ('BH', 3), ('HC', 3), ('CC', 2), ('NC', 1), ('HH', 1), ('HN', 1), ('NH', 1)]
    >>> "".join(sorted("".join(insert('NNCB', {'CH': 'B', 'HH': 'N', 'CB': 'H', 'NH': 'C', 'HB': 'C', 'HC': 'B', 'HN': 'C', 'NN': 'C', 'BH': 'H', 'NC': 'B', 'NB': 'B', 'BN': 'B', 'BB': 'N', 'BC': 'B', 'CC': 'N', 'CN': 'C'}, 4).elements())))
    BBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCHHHHHNNNNNNNNNNN
    ""
    """

    c = Counter()
    c[' '+template[0]] += 1
    for i in range(len(template)-1):
        c[template[i]+template[i+1]] += 1
    c[template[-1]+' '] += 1

    for loop in range(limit):
        old_c, c = c, Counter()
        for pair, count in old_c.items():
            if pair in mapping:
                ch = mapping[pair]
                l, r = pair[0]+ch, ch+pair[1]
                c[l] += count
                c[r] += count
            else:
                c[pair] += count
        print(loop, c)
    return c


def digest(pairs):
    """
    abc
    >>> digest(Counter(["ab", "ab", "ab", "bc", "bc", "cd"])).most_common()
    [('b', 5), ('a', 3), ('c', 3), ('d', 1)]
    """
    singles = Counter()
    for (l, r), count in pairs.items():
        singles[l] += count 
        singles[r] += count 

    for k, v in singles.items():
        singles[k] = v // 2
    del singles[" "] 
    return singles

import doctest
doctest.testmod(optionflags=doctest.REPORT_UDIFF|doctest.NORMALIZE_WHITESPACE|doctest.ELLIPSIS)

template, mapping = parse(example_data)
count = digest(insert(template, mapping, 40)).most_common()
print(count)
print("     got", count[0][0], count[-1][0])
print("     got", count[0][1], count[-1][1])
print("expected", 2192039569602, 3849876073)
print(count[0][1] - count[-1][1], "==", 2188189693529)

template, mapping = parse(actual_data)
count = digest(insert(template, mapping, 40)).most_common()
print(count[0], count[-1])
print(count[0][1] - count[-1][1])
