#!/usr/bin/python3

import doctest
import re
import itertools
import heapq
import bisect
from collections import Counter
from collections import defaultdict
from collections import deque
from collections import namedtuple
from numba import jit
from statistics import mean, median, median_low, median_high, mode, multimode

@jit(nopython=True)
def cmp(l, r): return (l > r) - (l < r)  # works because boolean is integery, t=1, f=0


actual_data = """\


def hexstr_to_nybblebitsstr(s):
    """
    >>> str(hexstr_to_nybblebitsstr("074"))
    '000001110100'
    """
    return "".join("{:04b}".format(int(c, 16)) for c in s)


def sum_versions(packet):
    if not hasattr(packet.value, 'count'):
        return packet.version
    else:
        return packet.version + sum(sum_versions(p) for p in packet.value) 

def product(l):
    p = 1
    for item in l:
        p *= item
    return p

class Packet:
    """
    >>> Packet(hexstr_to_nybblebitsstr('D2FE28'))
    packet v=6 t=4 2021
    >>> len(Packet(hexstr_to_nybblebitsstr('D2FE28')))
    21
    >>> Packet(hexstr_to_nybblebitsstr('38006F45291200'))
    packet v=1 t=6 [packet v=6 t=4 10, packet v=2 t=4 20]
    >>> Packet(hexstr_to_nybblebitsstr('EE00D40C823060'))
    packet v=7 t=3 [packet v=2 t=4 1, packet v=4 t=4 2, packet v=1 t=4 3]

    8A004A801A8002F478 represents an operator packet (version 4) which contains
    an operator packet (version 1) which contains an operator packet (version 5)
    which contains a literal value (version 6); this packet has a version sum of
    16.
    >>> Packet(hexstr_to_nybblebitsstr('8A004A801A8002F478'))
    packet v=4 ... [packet v=1 ... [packet v=5 ... [packet v=6 ...]]]

    620080001611562C8802118E34 represents an operator packet (version 3) which
    contains two sub-packets; each sub-packet is an operator packet that
    contains two literal values. This packet has a version sum of 12.
    >>> Packet(hexstr_to_nybblebitsstr('620080001611562C8802118E34'))
    packet ... [packet ... [packet ..., packet ...], packet ... [packet ..., packet ...]]

    C0015000016115A2E0802F182340 has the same structure as the previous
    example, but the outermost packet uses a different length type ID. This
    packet has a version sum of 23.
    >>> Packet(hexstr_to_nybblebitsstr('C0015000016115A2E0802F182340'))
    packet ... [packet ... [packet ..., packet ...], packet ... [packet ..., packet ...]]

    A0016C880162017C3686B18A3D4780 is an operator packet that contains an
    operator packet that contains an operator packet that contains five literal
    values; it has a version sum of 31.
    >>> Packet(hexstr_to_nybblebitsstr('A0016C880162017C3686B18A3D4780'))
    packet ... [packet ... [packet ... [packet ..., packet ..., packet ..., packet ..., packet ...]]]

    
    >>> Packet(hexstr_to_nybblebitsstr('C200B40A82')).evaluate() # finds the sum of 1 and 2, resulting in the value 3.
    3
    >>> Packet(hexstr_to_nybblebitsstr('04005AC33890')).evaluate() # finds the product of 6 and 9, resulting in the value 54.
    54
    >>> Packet(hexstr_to_nybblebitsstr('880086C3E88112')).evaluate() # finds the minimum of 7, 8, and 9, resulting in the value 7.
    7
    >>> Packet(hexstr_to_nybblebitsstr('CE00C43D881120')).evaluate() # finds the maximum of 7, 8, and 9, resulting in the value 9.
    9
    >>> int(Packet(hexstr_to_nybblebitsstr('D8005AC2A8F0')).evaluate()) # produces 1, because 5 is less than 15.
    1
    >>> int(Packet(hexstr_to_nybblebitsstr('F600BC2D8F')).evaluate()) # produces 0, because 5 is not greater than 15.
    0
    >>> int(Packet(hexstr_to_nybblebitsstr('9C005AC2F8F0')).evaluate()) # produces 0, because 5 is not equal to 15.
    0
    >>> Packet(hexstr_to_nybblebitsstr('9C0141080250320F1802104A08')).evaluate() # produces 1, because 1 + 3 = 2 * 2
    1

    """

    def __init__(self, bit_string_repr, δ=0):
        self.version = int(bit_string_repr[δ+0:δ+3], 2)
        self.type_id = int(bit_string_repr[δ+3:δ+6], 2)

        if self.type_id == 4:
            # literals
            self.value, consumed_by_literal = self.parse_literal(bit_string_repr, δ+6)
            self.size_used = 3+3+consumed_by_literal
        else:
            # operators
            length_type = bit_string_repr[δ+6]
            self.value = list()
            if length_type == '0':
                payload_size = int(bit_string_repr[δ+7:δ+7+15], 2)
                assert payload_size <= len(bit_string_repr)-δ, (bit_string_repr[δ+7:δ+7+15], payload_size)
                while True:
                    consumed = sum(len(p) for p in self.value)
                    assert consumed <= payload_size, (consumed, payload_size)
                    if consumed == payload_size: break
                    sub = Packet(bit_string_repr, δ+7+15+consumed)
                    self.value.append(sub)
                self.size_used = 7+15 + payload_size
            else:
                remaining_sub_packets = int(bit_string_repr[δ+7:δ+7+11], 2)
                for i in range(remaining_sub_packets):
                    next_packet_at = δ+7+11 + sum(len(p) for p in self.value)
                    p = Packet(bit_string_repr, next_packet_at)
                    self.value.append(p)
                packets_space_occupied = sum(len(p) for p in self.value)
                self.size_used = 7+11 + packets_space_occupied

    @staticmethod
    def parse_literal(bit_string_repr, starting_at):
        accum_bits = list()
        cursor = starting_at
        while True:
            chunk = bit_string_repr[cursor:cursor+5]
            assert len(chunk) == 5, chunk
            accum_bits.extend(chunk[1:])
            if chunk[0] == '0': break
            cursor += 5
        return int("".join(accum_bits), 2), cursor+5 - starting_at

    def evaluate(self):
        """
    Packets with type ID 0 are sum packets - their value is the sum of the values of their sub-packets. If they only have a single sub-packet, their value is the value of the sub-packet.
    Packets with type ID 1 are product packets - their value is the result of multiplying together the values of their sub-packets. If they only have a single sub-packet, their value is the value of the sub-packet.
    Packets with type ID 2 are minimum packets - their value is the minimum of the values of their sub-packets.
    Packets with type ID 3 are maximum packets - their value is the maximum of the values of their sub-packets.
    Packets with type ID 5 are greater than packets - their value is 1 if the value of the first sub-packet is greater than the value of the second sub-packet; otherwise, their value is 0. These packets always have exactly two sub-packets.
    Packets with type ID 6 are less than packets - their value is 1 if the value of the first sub-packet is less than the value of the second sub-packet; otherwise, their value is 0. These packets always have exactly two sub-packets.
    Packets with type ID 7 are equal to packets - their value is 1 if the value of the first sub-packet is equal to the value of the second sub-packet; otherwise, their value is 0. These packets always have exactly two sub-packets.
        """

        if self.type_id == 4:
            return self.value
        elif self.type_id == 0:
            return sum(p.evaluate() for p in self.value)
        elif self.type_id == 1:
            return product(p.evaluate() for p in self.value)
        elif self.type_id == 2:
            return min(p.evaluate() for p in self.value)
        elif self.type_id == 3:
            return max(p.evaluate() for p in self.value)
        elif self.type_id == 5:
            return self.value[0].evaluate() > self.value[1].evaluate()
        elif self.type_id == 6:
            return self.value[0].evaluate() < self.value[1].evaluate()
        elif self.type_id == 7:
            return self.value[0].evaluate() == self.value[1].evaluate()
        else:
            raise ValueError(self.type_id)
        
        
            
    def __repr__(self):
        return "packet v={} t={} {}".format(self.version, self.type_id, self.value)

    def __len__(self):
        return self.size_used

import doctest
doctest.testmod(optionflags=doctest.REPORT_UDIFF|doctest.NORMALIZE_WHITESPACE|doctest.ELLIPSIS)

print(Packet(hexstr_to_nybblebitsstr(actual_data)).evaluate())
