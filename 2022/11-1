#!/usr/bin/python3

from aoc_lib import *
import operator

actual_data = """\
Monkey 0:
  Starting items: 89, 84, 88, 78, 70
  Operation: new = old * 5
  Test: divisible by 7
    If true: throw to monkey 6
    If false: throw to monkey 7

Monkey 1:
  Starting items: 76, 62, 61, 54, 69, 60, 85
  Operation: new = old + 1
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 6

Monkey 2:
  Starting items: 83, 89, 53
  Operation: new = old + 8
  Test: divisible by 11
    If true: throw to monkey 5
    If false: throw to monkey 3

Monkey 3:
  Starting items: 95, 94, 85, 57
  Operation: new = old + 4
  Test: divisible by 13
    If true: throw to monkey 0
    If false: throw to monkey 1

Monkey 4:
  Starting items: 82, 98
  Operation: new = old + 7
  Test: divisible by 19
    If true: throw to monkey 5
    If false: throw to monkey 2

Monkey 5:
  Starting items: 69
  Operation: new = old + 2
  Test: divisible by 2
    If true: throw to monkey 1
    If false: throw to monkey 3

Monkey 6:
  Starting items: 82, 70, 58, 87, 59, 99, 92, 65
  Operation: new = old * 11
  Test: divisible by 5
    If true: throw to monkey 7
    If false: throw to monkey 4

Monkey 7:
  Starting items: 91, 53, 96, 98, 68, 82
  Operation: new = old * old
  Test: divisible by 3
    If true: throw to monkey 4
    If false: throw to monkey 2"""

example_data = """\
Monkey 0:
  Starting items: 79, 98
  Operation: new = old * 19
  Test: divisible by 23
    If true: throw to monkey 2
    If false: throw to monkey 3

Monkey 1:
  Starting items: 54, 65, 75, 74
  Operation: new = old + 6
  Test: divisible by 19
    If true: throw to monkey 2
    If false: throw to monkey 0

Monkey 2:
  Starting items: 79, 60, 97
  Operation: new = old * old
  Test: divisible by 13
    If true: throw to monkey 1
    If false: throw to monkey 3

Monkey 3:
  Starting items: 74
  Operation: new = old + 3
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 1"""


class Monkey:
    def __init__(self, num, starting, inspect, divisible_by, test_true_op, test_false_op):
        self.num = num
        self.items = list(starting)
        self.inspect = inspect
        self.divisible_by = divisible_by
        self.test_true_op = test_true_op
        self.test_false_op = test_false_op
        self.inspection_count = 0
        
    def __repr__(self):
        return "Monkey{} {} %{} {}:{}".format(self.num, str(self.items), self.divisible_by, self.test_true_op, self.test_false_op)

    @staticmethod
    def parse(text):
        """
        >>> Monkey.parse("Monkey 3:\\n  Starting items: 74\\n  Operation: new = old + 3\\n  Test: divisible by 17\\n    If true: throw to monkey 0\\n    If false: throw to monkey 1")
        ('3', Monkey3 [74] %17 0:1)
        >>> monkies = dict(Monkey.parse(section) for section in example_data.split("\\n\\n"))
        >>> sorted(monkies.items())
        [('0', Monkey0 [79, 98] %23 2:3), ('1', Monkey1 [54, 65, 75, 74] %19 2:0), ('2', Monkey2 [79, 60, 97] %13 1:3), ('3', Monkey3 [74] %17 0:1)]
        """

        m = re.match(r"Monkey (\d+):\s+Starting items: ([0-9, ]+)\s+Operation: (\w+) = (\w+) (.) (\w+)\s+Test: divisible by (\d+)\s+If true: throw to monkey (\d+)\s+If false: throw to monkey (\d+)", text, re.MULTILINE|re.DOTALL)

        arithop = { "+": operator.add, "*": operator.mul }[m.group(5)]
        try:
            int(m.group(6))
            op = lambda ns: arithop(ns[m.group(4)], int(m.group(6)))
        except ValueError:
            op = lambda ns: arithop(ns[m.group(4)], ns[m.group(6)])

        ns = { "old": 1 }

        test = int(m.group(7))

        monkey = Monkey(m.group(1), map(int, m.group(2).split(", ")), op, test, m.group(8), m.group(9))
        return m.group(1), monkey

    def catch(self, worry):
        self.items.append(worry)


def solve(raw_data, round_limit=1, verbose=False):
    """
    >>> solve(example_data, round_limit=1, verbose=True)
    Monkey 0:
      Monkey inspects an item with a worry level of 79.
        Worry level ... to 1501.
        Monkey gets bored with item. Worry level is divided by 3 to 500.
        Current worry level is not divisible by 23.
        Item with worry level 500 is thrown to monkey 3.
      Monkey inspects an item with a worry level of 98.
        Worry level ... to 1862.
        Monkey gets bored with item. Worry level is divided by 3 to 620.
        Current worry level is not divisible by 23.
        Item with worry level 620 is thrown to monkey 3.
    Monkey 1:
      Monkey inspects an item with a worry level of 54.
        Worry level ... to 60.
        Monkey gets bored with item. Worry level is divided by 3 to 20.
        Current worry level is not divisible by 19.
        Item with worry level 20 is thrown to monkey 0.
      Monkey inspects an item with a worry level of 65.
        Worry level ... to 71.
        Monkey gets bored with item. Worry level is divided by 3 to 23.
        Current worry level is not divisible by 19.
        Item with worry level 23 is thrown to monkey 0.
      Monkey inspects an item with a worry level of 75.
        Worry level ... to 81.
        Monkey gets bored with item. Worry level is divided by 3 to 27.
        Current worry level is not divisible by 19.
        Item with worry level 27 is thrown to monkey 0.
      Monkey inspects an item with a worry level of 74.
        Worry level ... to 80.
        Monkey gets bored with item. Worry level is divided by 3 to 26.
        Current worry level is not divisible by 19.
        Item with worry level 26 is thrown to monkey 0.
    Monkey 2:
      Monkey inspects an item with a worry level of 79.
        Worry level ... to 6241.
        Monkey gets bored with item. Worry level is divided by 3 to 2080.
        Current worry level is divisible by 13.
        Item with worry level 2080 is thrown to monkey 1.
      Monkey inspects an item with a worry level of 60.
        Worry level ... to 3600.
        Monkey gets bored with item. Worry level is divided by 3 to 1200.
        Current worry level is not divisible by 13.
        Item with worry level 1200 is thrown to monkey 3.
      Monkey inspects an item with a worry level of 97.
        Worry level ... to 9409.
        Monkey gets bored with item. Worry level is divided by 3 to 3136.
        Current worry level is not divisible by 13.
        Item with worry level 3136 is thrown to monkey 3.
    Monkey 3:
      Monkey inspects an item with a worry level of 74.
        Worry level ... to 77.
        Monkey gets bored with item. Worry level is divided by 3 to 25.
        Current worry level is not divisible by 17.
        Item with worry level 25 is thrown to monkey 1.
      Monkey inspects an item with a worry level of 500.
        Worry level ... to 503.
        Monkey gets bored with item. Worry level is divided by 3 to 167.
        Current worry level is not divisible by 17.
        Item with worry level 167 is thrown to monkey 1.
      Monkey inspects an item with a worry level of 620.
        Worry level ... to 623.
        Monkey gets bored with item. Worry level is divided by 3 to 207.
        Current worry level is not divisible by 17.
        Item with worry level 207 is thrown to monkey 1.
      Monkey inspects an item with a worry level of 1200.
        Worry level ... to 1203.
        Monkey gets bored with item. Worry level is divided by 3 to 401.
        Current worry level is not divisible by 17.
        Item with worry level 401 is thrown to monkey 1.
      Monkey inspects an item with a worry level of 3136.
        Worry level ... to 3139.
        Monkey gets bored with item. Worry level is divided by 3 to 1046.
        Current worry level is not divisible by 17.
        Item with worry level 1046 is thrown to monkey 1.
    [...]
    >>> solve(example_data, round_limit=20, verbose=False)
    [101, 95, 7, 105]
    >>> print(product(sorted(solve(example_data, 20))[-2:]))
    10605
    """
    monkies = dict(Monkey.parse(section) for section in raw_data.split("\n\n"))
    
    round = -1
    while True:
        round += 1

        for i, monkey in sorted(monkies.items(), key=lambda kv: int(kv[0])):
            if verbose: print("Monkey {}:".format(i))

            monkey_items, monkey.items = monkey.items, list()
            for old_worry in monkey_items:
                if verbose: print("  Monkey inspects an item with a worry level of {}.".format(old_worry))

                ns = { "old": old_worry }
                worry = monkey.inspect(ns)
                monkey.inspection_count += 1
                if verbose: print("    Worry level ... to {}.".format(worry))

                worry = worry // 3
                if verbose: print("    Monkey gets bored with item. Worry level is divided by 3 to {}.".format(worry))

                test_result = (worry % monkey.divisible_by) == 0

                if test_result:
                    if verbose: print("    Current worry level is divisible by {}.".format(monkey.divisible_by))
                    receiver_number = monkey.test_true_op
                else:
                    if verbose: print("    Current worry level is not divisible by {}.".format(monkey.divisible_by))
                    receiver_number = monkey.test_false_op

                if verbose: print("    Item with worry level {} is thrown to monkey {}.".format(worry, receiver_number))
                monkies[receiver_number].catch(worry)

        if round == round_limit - 1:
            break
    
    return [m.inspection_count for i, m in sorted(monkies.items(), key=lambda kv: int(kv[0]))]


import doctest
doctest.testmod(optionflags=doctest.REPORT_UDIFF|doctest.NORMALIZE_WHITESPACE|doctest.ELLIPSIS)

print(product(sorted(solve(actual_data, 20))[-2:]))
